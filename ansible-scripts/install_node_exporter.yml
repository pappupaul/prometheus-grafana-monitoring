---
- name: Install Node Exporter
  hosts: targets
  become: true  # This is required as we need root privileges
  gather_facts: no  # Disable fact gathering initially
  
  pre_tasks:
    - name: Install Python 3.8
      raw: |
        if ! command -v python3.8 &> /dev/null; then
          apt-get update
          apt-get install -y python3.8 python3.8-distutils python3-pip
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
        fi
      become: true
      
    - name: Set python interpreter to python3.8
      set_fact:
        ansible_python_interpreter: /usr/bin/python3.8
  vars:
    node_exporter_version: "1.9.1"
    node_exporter_arch: "linux-amd64"
    node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}.tar.gz"

  tasks:
    - name: Check if node_exporter is already installed
      stat:
        path: /usr/local/bin/node_exporter
      register: node_exporter_binary

    - name: Check if node_exporter service exists
      stat:
        path: /etc/systemd/system/node_exporter.service
      register: node_exporter_service

    - name: Get installed node_exporter version
      shell: "/usr/local/bin/node_exporter --version"
      register: current_version
      ignore_errors: yes
      when: node_exporter_binary.stat.exists

    - name: Show current installation status
      debug:
        msg: "Node Exporter {{ current_version.stdout | default('') }} is already installed"
      when: node_exporter_binary.stat.exists and current_version is defined and current_version.rc == 0

    - name: Create node_exporter user
      user:
        name: node_exporter
        shell: /bin/false
        system: true
        create_home: false
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists

    - name: Download node_exporter
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists
      get_url:
        url: "{{ node_exporter_download_url }}"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}.tar.gz"
        mode: '0644'

    - name: Create directory for node_exporter
      file:
        path: /usr/local/bin
        state: directory
        mode: '0755'
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists

    - name: Extract node_exporter binary
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists
      unarchive:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}.tar.gz"
        dest: /tmp
        remote_src: yes

    - name: Move node_exporter binary to /usr/local/bin
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}/node_exporter"
        dest: "/usr/local/bin/node_exporter"
        mode: '0755'
        remote_src: yes
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists

    - name: Create systemd service file
      when: not node_exporter_service.stat.exists
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      when: not node_exporter_service.stat.exists

    - name: Enable and start node_exporter service
      when: not node_exporter_service.stat.exists
      systemd:
        name: node_exporter
        state: started
        enabled: yes

    - name: Clean up downloaded archive
      file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}.tar.gz"
        state: absent
      when: not node_exporter_binary.stat.exists or not node_exporter_service.stat.exists

    - name: Clean up extracted directory
      file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}"
        state: absent
